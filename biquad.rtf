{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red4\green46\blue109;\red109\green109\blue109;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c25098\c50196;\cssrgb\c50196\c50196\c50196;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2          Cookbook formulae for audio EQ biquad filter coefficients\
----------------------------------------------------------------------------\
           by Robert Bristow-Johnson  <rbj@audioimagination.com>\
\
\
All filter transfer functions were derived from analog prototypes (that\
are shown below for each EQ filter type) and had been digitized using the\
Bilinear Transform.  BLT frequency warping has been taken into account for\
both significant frequency relocation (this is the normal "prewarping" that\
is necessary when using the BLT) and for bandwidth readjustment (since the\
bandwidth is compressed when mapped from analog to digital using the BLT).\
\
First, given a biquad transfer function defined as:\
\
            b0 + b1*z^-1 + b2*z^-2\
    H(z) = ------------------------                                  (Eq 1)\
            a0 + a1*z^-1 + a2*z^-2\
\
This shows 6 coefficients instead of 5 so, depending on your architechture,\
you will likely normalize a0 to be 1 and perhaps also b0 to 1 (and collect\
that into an overall gain coefficient).  Then your transfer function would\
look like:\
\
            (b0/a0) + (b1/a0)*z^-1 + (b2/a0)*z^-2\
    H(z) = ---------------------------------------                   (Eq 2)\
               1 + (a1/a0)*z^-1 + (a2/a0)*z^-2\
\
or\
\
                      1 + (b1/b0)*z^-1 + (b2/b0)*z^-2\
    H(z) = (b0/a0) * ---------------------------------               (Eq 3)\
                      1 + (a1/a0)*z^-1 + (a2/a0)*z^-2\
\
\
The most straight forward implementation would be the "Direct Form 1"\
(Eq 2):\
\
    y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]\
                        - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]            (Eq 4)\
\
This is probably both the best and the easiest method to implement in the\
56K and other fixed-point or floating-point architechtures with a double\
wide accumulator.\
\
\
\
Begin with these user defined parameters:\
\
    Fs (the sampling frequency)\
\
    f0 ("wherever it's happenin', man."  Center Frequency or\
        Corner Frequency, or shelf midpoint frequency, depending\
        on which filter type.  The "significant frequency".)\
\
    dBgain (used only for peaking and shelving filters)\
\
    Q (the EE kind of definition, except for peakingEQ in which A*Q is\
        the classic EE Q.  That adjustment in definition was made so that\
        a boost of N dB followed by a cut of N dB for identical Q and\
        f0/Fs results in a precisely flat unity gain filter or "wire".)\
\
     _or_ BW, the bandwidth in octaves (between -3 dB frequencies for BPF\
        and notch or between midpoint (dBgain/2) gain frequencies for\
        peaking EQ)\
\
     _or_ S, a "shelf slope" parameter (for shelving EQ only).  When S = 1,\
        the shelf slope is as steep as it can be and remain monotonically\
        increasing or decreasing gain with frequency.  The shelf slope, in\
        dB/octave, remains proportional to S for all other values for a\
        fixed f0/Fs and dBgain.\
\
\
\
Then compute a few intermediate variables:\
\
    A  = sqrt( 10^(dBgain/20) )\
       =       10^(dBgain/40)     (for peaking and shelving EQ filters only)\
\
    w0 = 2*pi*f0/Fs\
\
    cos(w0)\
    sin(w0)\
\
    alpha = sin(w0)/(2*Q)                                       (case: Q)\
          = sin(w0)*sinh( ln(2)/2 * BW * w0/sin(w0) )           (case: BW)\
          = sin(w0)/2 * sqrt( (A + 1/A)*(1/S - 1) + 2 )         (case: S)\
\
        FYI: The relationship between bandwidth and Q is\
             1/Q = 2*sinh(ln(2)/2*BW*w0/sin(w0))     (digital filter w BLT)\
        or   1/Q = 2*sinh(ln(2)/2*BW)             (analog filter prototype)\
\
        The relationship between shelf slope and Q is\
             1/Q = sqrt((A + 1/A)*(1/S - 1) + 2)\
\
    2*sqrt(A)*alpha  =  sin(w0) * sqrt( (A^2 + 1)*(1/S - 1) + 2*A )\
        is a handy intermediate variable for shelving EQ filters.\
\
\
Finally, compute the coefficients for whichever filter type you want:\
   (The analog prototypes, H(s), are shown for each filter\
        type for normalized frequency.)\
\
\
LPF:        H(s) = 1 / (s^2 + s/Q + 1)\
\
            b0 =  (1 - cos(w0))/2\
            b1 =   1 - cos(w0)\
            b2 =  (1 - cos(w0))/2\
            a0 =   1 + alpha\
            a1 =  -2*cos(w0)\
            a2 =   1 - alpha\
\
\
\
HPF:        H(s) = s^2 / (s^2 + s/Q + 1)\
\
            b0 =  (1 + cos(w0))/2\
            b1 = -(1 + cos(w0))\
            b2 =  (1 + cos(w0))/2\
            a0 =   1 + alpha\
            a1 =  -2*cos(w0)\
            a2 =   1 - alpha\
\
\
\
BPF:        H(s) = s / (s^2 + s/Q + 1)  (constant skirt gain, peak gain = Q)\
\
            b0 =   sin(w0)/2  =   Q*alpha\
            b1 =   0\
            b2 =  -sin(w0)/2  =  -Q*alpha\
            a0 =   1 + alpha\
            a1 =  -2*cos(w0)\
            a2 =   1 - alpha\
\
\
BPF:        H(s) = (s/Q) / (s^2 + s/Q + 1)      (constant 0 dB peak gain)\
\
            b0 =   alpha\
            b1 =   0\
            b2 =  -alpha\
            a0 =   1 + alpha\
            a1 =  -2*cos(w0)\
            a2 =   1 - alpha\
\
\
\
notch:      H(s) = (s^2 + 1) / (s^2 + s/Q + 1)\
\
            b0 =   1\
            b1 =  -2*cos(w0)\
            b2 =   1\
            a0 =   1 + alpha\
            a1 =  -2*cos(w0)\
            a2 =   1 - alpha\
\
\
\
APF:        H(s) = (s^2 - s/Q + 1) / (s^2 + s/Q + 1)\
\
            b0 =   1 - alpha\
            b1 =  -2*cos(w0)\
            b2 =   1 + alpha\
            a0 =   1 + alpha\
            a1 =  -2*cos(w0)\
            a2 =   1 - alpha\
\
\
\
peakingEQ:  H(s) = (s^2 + s*(A/Q) + 1) / (s^2 + s/(A*Q) + 1)\
\
            b0 =   1 + alpha*A\
            b1 =  -2*cos(w0)\
            b2 =   1 - alpha*A\
            a0 =   1 + alpha/A\
            a1 =  -2*cos(w0)\
            a2 =   1 - alpha/A\
\
\
\
lowShelf: H(s) = A * (s^2 + (sqrt(A)/Q)*s + A)/(A*s^2 + (sqrt(A)/Q)*s + 1)\
\
            b0 =    A*( (A+1) - (A-1)*cos(w0) + 2*sqrt(A)*alpha )\
            b1 =  2*A*( (A-1) - (A+1)*cos(w0)                   )\
            b2 =    A*( (A+1) - (A-1)*cos(w0) - 2*sqrt(A)*alpha )\
            a0 =        (A+1) + (A-1)*cos(w0) + 2*sqrt(A)*alpha\
            a1 =   -2*( (A-1) + (A+1)*cos(w0)                   )\
            a2 =        (A+1) + (A-1)*cos(w0) - 2*sqrt(A)*alpha\
\
\
\
highShelf: H(s) = A * (A*s^2 + (sqrt(A)/Q)*s + 1)/(s^2 + (sqrt(A)/Q)*s + A)\
\
            b0 =    A*( (A+1) + (A-1)*cos(w0) + 2*sqrt(A)*alpha )\
            b1 = -2*A*( (A-1) + (A+1)*cos(w0)                   )\
            b2 =    A*( (A+1) + (A-1)*cos(w0) - 2*sqrt(A)*alpha )\
            a0 =        (A+1) - (A-1)*cos(w0) + 2*sqrt(A)*alpha\
            a1 =    2*( (A-1) - (A+1)*cos(w0)                   )\
            a2 =        (A+1) - (A-1)*cos(w0) - 2*sqrt(A)*alpha\
\
\
\
\
\
FYI:   The bilinear transform (with compensation for frequency warping)\
substitutes:\
\
                                  1         1 - z^-1\
      (normalized)   s  <--  ----------- * ----------\
                              tan(w0/2)     1 + z^-1\
\
   and makes use of these trig identities:\
\
                     sin(w0)                               1 - cos(w0)\
      tan(w0/2) = -------------           (tan(w0/2))^2 = -------------\
                   1 + cos(w0)                             1 + cos(w0)\
\
\
   resulting in these substitutions:\
\
\
                 1 + cos(w0)     1 + 2*z^-1 + z^-2\
      1    <--  ------------- * -------------------\
                 1 + cos(w0)     1 + 2*z^-1 + z^-2\
\
\
                 1 + cos(w0)     1 - z^-1\
      s    <--  ------------- * ----------\
                   sin(w0)       1 + z^-1\
\
                                      1 + cos(w0)     1         -  z^-2\
                                  =  ------------- * -------------------\
                                        sin(w0)       1 + 2*z^-1 + z^-2\
\
\
                 1 + cos(w0)     1 - 2*z^-1 + z^-2\
      s^2  <--  ------------- * -------------------\
                 1 - cos(w0)     1 + 2*z^-1 + z^-2\
\
\
   The factor:\
\
                    1 + cos(w0)\
                -------------------\
                 1 + 2*z^-1 + z^-2\
\
   is common to all terms in both numerator and denominator, can be factored\
   out, and thus be left out in the substitutions above resulting in:\
\
\
                 1 + 2*z^-1 + z^-2\
      1    <--  -------------------\
                    1 + cos(w0)\
\
\
                 1         -  z^-2\
      s    <--  -------------------\
                      sin(w0)\
\
\
                 1 - 2*z^-1 + z^-2\
      s^2  <--  -------------------\
                    1 - cos(w0)\
\
\
   In addition, all terms, numerator and denominator, can be multiplied by a\
   common (sin(w0))^2 factor, finally resulting in these substitutions:\
\
\
      1         <--   (1 + 2*z^-1 + z^-2) * (1 - cos(w0))\
\
      s         <--   (1         -  z^-2) * sin(w0)\
\
      s^2       <--   (1 - 2*z^-1 + z^-2) * (1 + cos(w0))\
\
      1 + s^2   <--   2 * (1 - 2*cos(w0)*z^-1 + z^-2)\
\
\
   The biquad coefficient formulae above come out after a little\
   simplification.\
\
\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf2 Notes : \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \strokec3 The nominal implementation for biquads is the Direct Form I variant. But the Direct Form II is actually more suited for calculating the biquad since it needs only 2 memory locations, and the multiplications can be pipelined better by the compiler. In release build, I've noted a considerable speedup when compared to DF I. When processing stereo, the code below was ~ 2X faster. Until I develop a SIMD biquad that is faster, this will do.\cf2 \strokec2 \
\
Code : \
\pard\pardeftab720\sl220\partightenfactor0

\f2\fs20 \cf3 \strokec3 // b0, b1, b2, a1, a2 calculated via r.b-j's cookbook\
// formulae.\
// m1, m2 are the memory locations\
// dn is the de-denormal coeff (=1.0e-20f) \
\
void processBiquad(const float* in, float* out, unsigned length)\
\{\
\'a0\'a0\'a0\'a0for(unsigned i = 0; i < length; ++i)\
\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0register float w = in[i] - a1*m1 - a2*m2 + dn;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0out[i] = b1*m1 + b2*m2 + b0*w;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0m2 = m1; m1 = w;\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0dn = -dn;\
\}\
\
void processBiquadStereo(const float* inL,\
\'a0\'a0 const float* inR, \
\'a0\'a0 float* outL,\
\'a0\'a0 float* outR, \
\'a0\'a0 unsigned length)\
\{\
\'a0\'a0\'a0\'a0for(unsigned i = 0; i < length; ++i)\
\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0register float wL = inL[i] - a1*m1L - a2*m2L + dn;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0register float wR = inR[i] - a1*m1R - a2*m2R + dn;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0outL[i] = b1*m1L + b2*m2L + b0*wL;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0m2L = m1L; m1L = wL;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0outR[i] = b1*m1R + b2*m2R + b0*wR;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0m2R = m1R; m1R = wR;\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0dn = -dn;\
\
\pard\pardeftab720\sl220\partightenfactor0
\cf3 \}\
\pard\pardeftab720\sl220\partightenfactor0
\cf3 \
\
\
\
\pard\pardeftab720\sl280\partightenfactor0

\f1\b\fs24 \cf2 \strokec2 Direct form II
\b0 \
\
Type : \cf3 \strokec3 generic\cf2 \strokec2 \
References : \cf3 \strokec3 Posted by Fuzzpilz\cf2 \strokec2 \
\
Notes : \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \strokec3 I've noticed there's no code for direct form II filters in general here, though probably many of the filter examples use it. I haven't looked at them all to verify that, but there certainly doesn't seem to be a snippet describing this.\
\
This is a simple direct form II implementation of a k-pole, k-zero filter. It's a little faster than (a naive, real-time implementation of) direct form I, as well as more numerically accurate.\cf2 \strokec2 \
\
Code : \
\pard\pardeftab720\sl220\partightenfactor0

\f2\fs20 \cf3 \strokec3 Direct form I pseudocode:\
\
y[n] = a[0]*x[n] + a[1]*x[n-1] + .. + a[k]*x[n-k]\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 - b[1]*y[n-1] - .. - b[k]*y[n-k];\
\
Simple equivalent direct form II pseudocode:\
\
y[n] = a[0]*x[n] + d[0];\
d[0] = a[1]*x[n] - b[1]*y[n] + d[1];\
d[1] = a[2]*x[n] - b[2]*y[n] + d[2];\
.\
.\
d[k-2] = a[k-1]*x[n] - b[k-1]*y[n] + d[k-1];\
d[k-1] = a[k]*x[n] - b[k]*y[n];\
\
For example, a biquad:\
\
out = a0*in + a1*h0 + a2*h1 - b1*h2 - b2*h3;\
h1 = h0;\
h0 = in;\
h3 = h2;\
h2 = out;\
\
becomes\
\
out = a0*in + d0;\
d0 = a1*in - b1*out + d1;\
d1 = a2*in - b2*out;
\f1\fs24 \cf2 \strokec2 \
\pard\pardeftab720\li9368\sl280\sa120\partightenfactor0
\cf2 \cb4 \
\
\
}